"""
예로 들어 N=3, K=7, B[7] 를 찾고 싶다면
0. 이분탐색을 이용할꺼다! 경우의 수가 짱 많기 때문이지
1. 우선 당연히 B[7]는 K보다 작을 것이다 (중복이 있으니까) 그러므로 high 는 k가 된다.
2. 그리고 7번째 숫자를 찾고 싶은거라면, 그거보다 작은 6개 숫자는 뭔지를 찾으면 됨..! (7번째로 작은 수가 7번째 숫자일테니까 당연)
3. 이때 행들은 각각 1, 2, 3... 의 배수가 들어가 있으므로 (1 곱하기, 2곱하기 등등..)
   만약 7를 찾고 싶다면, 7/1을 했을때 1행에 7보다 작은게 몇개 들어가 있는지를 알 수 있고, (이 경우 7이 나오므로 3개 숫자 모두 7보다 작음)
   7/2 하면 3.xx가 나오므로 3개가 7보다 작으며, 7/3 하면 2.xx가 나오므로 2개가 7보다 작음을 알 수 있다.
   이렇게 결국 7보다 같거나 작은 숫자는 3 + 2 + 1 = 6개가 되고
4. 그러므로 (처음 + 마지막꺼) // 2 = 중간 이라고 했을때 중간보다 작은개 몇개인지를 찾고
5. 만약 그게 k보다 크다면 마지막을 미드 - 1 해서 다시 돌리고, k보다 작다면 처음을 미드 + 1 해서 휘리릭 하면
6. high <= low 할때까지 돌려버리면 나오지 않을까? (만약 같으면 어떡하지? 돌리면서 생각해보자 ㅇㅇ)
"""
N = int(input())
k = int(input())

# 당연히 B[7]는 K보다 작을 것이다 (중복이 있으니까) 그러므로 high 는 k가 된다.
low = 1
high = k
result = 0

# high <= low 할때까지 돌려버리기
while low <= high:
    mid = (low + high) // 2

    # k보다 같거나 작은 친구들은 몇개일까요?
    temp = 0
    for i in range(1, N + 1):
        # 각각의 행으로 미드를 휘리릭
        # 근데 만약 이 temp 가 N을 넘어간다면? (위에서 7/1 처럼..)
        # 그럴순 없으므로 N으로 만들어주기
        if mid // i >= N:
            temp += N
        else:
            temp += mid // i

    # 만약 temp가 k보다 크다면 high 옮겨주기
    # 근데 언제가 답일까? 만약에 내가 B[5]를 찾고 싶으면 [1, 5]에 mid=2 로 시작하겠지, 그러면 temp 는 3이 될꺼고 5는 3보다 크니까 start는 3이 되겠지
    # 그리고 다시 돌리면 [3, 5]에 mid=4로 시작하겠지, 그러면 temp는 6이 될꺼고 5는 6보다 작으니까 high는 4가 되겠지. 답은 3인뎅
    # 아? temp가 k-1개면 되는건가? 근데 만약 중복된게 여러개라면?
    # 한번 더해보자. 만약 [3, 4] mid = 3 이 상태로 시작한다면, temp는 5가 되고 5와 5는 같으니까 어?
    # 결국 이 상태에서의 mid 가 정답이라는 건데... 종료를 어떻게 하지?
    # 같다면 뭐든 올려도 되는거 아닌가? 그러면 종료될꺼 아니야 위의 경우 3이 4되도 끝나고 4가 3되도 끝나니까
    # 근데 작다면에 올리니까 예제가 틀림(정답은 6인데 5가 나옴). 왜일까?
    # N=3, k=7 일때 [low, high, mid]순으로 쓸때, [1, 7, 4]라면 temp = 6으로 k보다 작으므로 [5, 7, 6]이 됨
    # [5, 7, 6]은 temp=8 이므로 k보다 커서 [5, 5, 5]가 됨
    # 생각해보니까 k보다 작은 경우를 구하는 거였기 때문에 5개가 작은게 맞긴 하네.. 하지만 중복이 여러개라면? 다음이 5일지 6일지 모르는 거거든
    # 그러므로 temp가 k보다 크거나 같을때 mid를 봐야함. 위에서 내려와야지
    # 맞나?
    if temp >= k:
        result = mid
        high = mid - 1

    # temp가 k보다 작다면 low 옮겨주기
    elif temp < k:
        low = mid + 1
    # 같다면 정답? 아니넹
    # elif temp == k:
    #     result = mid

print(result)

